row.start <- 1+baselineonly.number
if(main.effect.number!=0){
for(j in 1:M){
for(k in 1:main.effect.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*main.effect.second.cat+1):
(column.start+k*main.effect.second.cat)] <- z.design.main.effect[j,]
}
}
}
}else if(i == "pairwise.interaction"){
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat
row.start <- 1+baselineonly.number+main.effect.number
if(pairwise.interaction.number!=0){
for(j in 1:M){
for(k in 1:pairwise.interaction.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*pairwise.interaction.second.cat+1):
(column.start+k*pairwise.interaction.second.cat)] <- z.design.pairwise.interaction[j,]
}
}
}
}else {
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat+
pairwise.interaction.number*pairwise.interaction.second.cat
row.start <- 1+baselineonly.number+main.effect.number+pairwise.interaction.number
if(saturated.number!=0){
for(j in 1:M){
for(k in 1:saturated.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*saturated.second.cat+1):
(column.start+k*saturated.second.cat)] <- z.design.saturated[j,]
}
}
}
}
for(i in c("intercept","baselineonly",
"main.effect","pairwise.interection",
"satuared")){
##we always keep intercept as saturated model and to simply, we always use diagnonal matrix for intercept
if(i=="intercept"){
###row start and column start point for this category
row.start <- 0
column.start <- 0
for(j in 1:M){
z.all[row.start+1+(j-1)*total.covar.number,(column.start+j)] = 1
}
}else if(i=="baselineonly"){
column.start = M
row.start <- 1
###test whether there is any baselineonly variable
if(baselineonly.number!=0){
for(j in 1:M){
for(k in 1:baseline.number){
z.all[row.start+k+(j-1)*total.covar.number,(column.start+k)] <- 1
}
}
}
}else if(i=="main.effect"){
column.start <- M+baselineonly.number
row.start <- 1+baselineonly.number
if(main.effect.number!=0){
for(j in 1:M){
for(k in 1:main.effect.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*main.effect.second.cat+1):
(column.start+k*main.effect.second.cat)] <- z.design.main.effect[j,]
}
}
}
}else if(i == "pairwise.interaction"){
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat
row.start <- 1+baselineonly.number+main.effect.number
if(pairwise.interaction.number!=0){
for(j in 1:M){
for(k in 1:pairwise.interaction.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*pairwise.interaction.second.cat+1):
(column.start+k*pairwise.interaction.second.cat)] <- z.design.pairwise.interaction[j,]
}
}
}
}else {
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat+
pairwise.interaction.number*pairwise.interaction.second.cat
row.start <- 1+baselineonly.number+main.effect.number+pairwise.interaction.number
if(saturated.number!=0){
for(j in 1:M){
for(k in 1:saturated.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*saturated.second.cat+1):
(column.start+k*saturated.second.cat)] <- z.design.saturated[j,]
}
}
}
}
}
total.covar.number <- 1+ baselineonly.number+main.effect.number+
pairwise.interaction.number+saturated.number
z.all <- matrix(0,nrow=(M*total.covar.number),ncol = (M+1*baselineonly.second.cat+
main.effect.second.cat*main.effect.number+
pairwise.interaction.second.cat*pairwise.interaction.number)+saturated.second.cat*saturated.number)
for(i in c("intercept","baselineonly",
"main.effect","pairwise.interection",
"satuared")){
##we always keep intercept as saturated model and to simply, we always use diagnonal matrix for intercept
if(i=="intercept"){
###row start and column start point for this category
row.start <- 0
column.start <- 0
for(j in 1:M){
z.all[row.start+1+(j-1)*total.covar.number,(column.start+j)] = 1
}
}else if(i=="baselineonly"){
column.start = M
row.start <- 1
###test whether there is any baselineonly variable
if(baselineonly.number!=0){
for(j in 1:M){
for(k in 1:baseline.number){
z.all[row.start+k+(j-1)*total.covar.number,(column.start+k)] <- 1
}
}
}
}else if(i=="main.effect"){
column.start <- M+baselineonly.number
row.start <- 1+baselineonly.number
if(main.effect.number!=0){
for(j in 1:M){
for(k in 1:main.effect.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*main.effect.second.cat+1):
(column.start+k*main.effect.second.cat)] <- z.design.main.effect[j,]
}
}
}
}else if(i == "pairwise.interaction"){
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat
row.start <- 1+baselineonly.number+main.effect.number
if(pairwise.interaction.number!=0){
for(j in 1:M){
for(k in 1:pairwise.interaction.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*pairwise.interaction.second.cat+1):
(column.start+k*pairwise.interaction.second.cat)] <- z.design.pairwise.interaction[j,]
}
}
}
}else {
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat+
pairwise.interaction.number*pairwise.interaction.second.cat
row.start <- 1+baselineonly.number+main.effect.number+pairwise.interaction.number
if(saturated.number!=0){
for(j in 1:M){
for(k in 1:saturated.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*saturated.second.cat+1):
(column.start+k*saturated.second.cat)] <- z.design.saturated[j,]
}
}
}
}
}
dim(z.all)
z.all <- matrix(0,nrow=(M*total.covar.number),ncol = (M+1*baselineonly.second.cat+
main.effect.second.cat*main.effect.number+
pairwise.interaction.second.cat*pairwise.interaction.number)+saturated.second.cat*saturated.number)
dim(z.all)
class(z.design.main.effect)
class(z.design.main.effect[,1])
class(z.design.main.effect[2,])
as.matrix(z.design.main.effect[2,])
z.all <- matrix(0,nrow=(M*total.covar.number),ncol = (M+1*baselineonly.second.cat+
main.effect.second.cat*main.effect.number+
pairwise.interaction.second.cat*pairwise.interaction.number)+saturated.second.cat*saturated.number)
for(i in c("intercept","baselineonly",
"main.effect","pairwise.interection",
"satuared")){
##we always keep intercept as saturated model and to simply, we always use diagnonal matrix for intercept
if(i=="intercept"){
###row start and column start point for this category
row.start <- 0
column.start <- 0
for(j in 1:M){
z.all[row.start+1+(j-1)*total.covar.number,(column.start+j)] = 1
}
}else if(i=="baselineonly"){
column.start = M
row.start <- 1
###test whether there is any baselineonly variable
if(baselineonly.number!=0){
for(j in 1:M){
for(k in 1:baseline.number){
z.all[row.start+k+(j-1)*total.covar.number,(column.start+k)] <- 1
}
}
}
}else if(i=="main.effect"){
column.start <- M+baselineonly.number
row.start <- 1+baselineonly.number
if(main.effect.number!=0){
for(j in 1:M){
for(k in 1:main.effect.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*main.effect.second.cat+1):
(column.start+k*main.effect.second.cat)] <- as.matrix(z.design.main.effect[j,])
}
}
}
}else if(i == "pairwise.interaction"){
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat
row.start <- 1+baselineonly.number+main.effect.number
if(pairwise.interaction.number!=0){
for(j in 1:M){
for(k in 1:pairwise.interaction.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*pairwise.interaction.second.cat+1):
(column.start+k*pairwise.interaction.second.cat)] <- as.matrix(z.design.pairwise.interaction[j,])
}
}
}
}else {
column.start <- M+baselineonly.number+main.effect.number*main.effect.second.cat+
pairwise.interaction.number*pairwise.interaction.second.cat
row.start <- 1+baselineonly.number+main.effect.number+pairwise.interaction.number
if(saturated.number!=0){
for(j in 1:M){
for(k in 1:saturated.number){
z.all[row.start+k+(j-1)*total.covar.number,
(column.start+(k-1)*saturated.second.cat+1):
(column.start+k*saturated.second.cat)] <- as.matrix(z.design.saturated[j,])
}
}
}
}
}
z.all
all.equal(z_all,z_all_save)
freq.subtypes
start_value_function = function(freq.subtypes,y.case.control,z.all){
###cutoff for take one subject
cutoff=10
ncontrol <- sum(y.case.control==0)
p.freq <- ncol(freq.subtypes)
freq = freq.subtypes[,p.freq]
idx =which(freq<=cutoff)
if(length(idx)!=0){
freq.subtypes = freq.subtypes[-idx,]
freq = freq.subtypes[,p.freq]
total = sum(freq)+ncontrol
p_emprical = freq/ncontrol
delta_inter = log(p_emprical/(1-p_empircal))
return(list(delta_inter,idx))
}else{
total = sum(freq)+ncontrol
p_emprical = freq/ncontrol
delta_inter = log(p_emprical/(1-p_empircal))
}
delta0 <- rep(0,ncol(z.all))
delta0[1:length(delta_inter)] <- delta_inter
return(delta0)
}
head(x_all)
dim(x_all)
library(bc2)
?Mvpoly
head(y)
View(main.effect)
library(bc2)
p_value_function(1.96)
library(bc2)
library(roxygen2)
library(bc2)
library(bc2)
?p_value_function
library(bc2)
?p_value_funciton
?p_value_function
document()
library(roxygen2)
document()
devtools::document()
devtools::document()
devtools::document()
shiny::runApp('~/GoogleDrive/try')
runApp('~/GoogleDrive/try')
runApp('~/GoogleDrive/try')
library(bc2)
a <- matrix(rnorm(16),4,4)
b <- a[2:4,2:4]
a
solve(solve(a)[2:4,2:4])
library(bc2)
getwd
getwd()
getwd()
setwd("/Users/zhangh24/GoogleDrive/bc2")
library(devtools)
library(bc2)
library(readr)
y_standard <- as.matrix(read_csv("../data/onco_y_standard.csv"))
getwd()
y_standard <- as.matrix(read_csv("./data/onco_y_standard.csv"))
x <- as.matrix(read_csv("./data/gene_and_pc.csv"))
y_onco <- as.matrix(read_csv("./data//onco_y.csv"))
pc <- x[,2:11]
gene <- x[,1]
##############Two stage model MLE
Heter_result = EMmvpoly(y_standard,baselineonly = NULL,main.effect = as.matrix(cbind(x)),pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888)
##############Two stage model MLE
Heter_result = EMmvpoly(y_onco,baselineonly = NULL,main.effect = as.matrix(cbind(x)),pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888)
logodds <- Heter_result[[1]][24:28]
info <- Heter_result[[2]][24:28,24:28]
logodds
info
GlobalTestForAssoc(logodds,info)
document()
GlobalTestForAssoc(logodds,info)
GlobalTestForHeter(logodds,info)
IndividualHeterTest(logodds,info)
IndividualHeterTest(logodds,info)
library(bc2)
IndividualHeterTest(logodds,info)
library(bc2)
IndividualHeterTest(logodds,info)
library(bc2)
library(bc2)
main.effect <- x
head(x)
tumor.number <- ncol(y)-1
head(y)
y.case.control <- y[,1]
y.tumor <- y[,2:(tumor.number+1)]
y.pheno.complete <- GenerateCompleteYPheno(y,missingTumorIndicator)
freq.subtypes <- GenerateFreqTable(y.pheno.complete)
if(CheckControlTumor(y.case.control,y.tumor)==1){
return(print("ERROR:The tumor characteristics for control subtypes should put as NA"))
}
tumor.names <- colnames(y.tumor)
if(is.null(tumor.names)){
tumor.names <- paste0(c(1:tumor.number))
}
tumor.character.cat = GenerateTumorCharacterCat(y.pheno.complete)
z.design.baselineonly <- GenerateZDesignBaselineonly(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.main.effect <- GenerateZDesignMainEffect(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.main.effect
#x.all has no intercept yet
#we will add the intercept in C code
x.all <- GenerateXAll(y,baselineonly,main.effect,pairwise.interaction,saturated)
delta0 <-StartValueFunction(freq.subtypes,y.case.control,z.all)
#x.all has no intercept yet
#we will add the intercept in C code
x.all <- GenerateXAll(y,baselineonly,main.effect,pairwise.interaction,saturated)
z.design.baselineonly <- GenerateZDesignBaselineonly(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.main.effect <- GenerateZDesignMainEffect(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.pairwise.interaction <- GenerateZDesignPairwiseInteraction(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.saturated <- GenerateZDesignSaturated(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.all <- ZDesigntoZall(baselineonly,
main.effect,
pairwise.interaction,
saturated,
z.design.baselineonly,
z.design.main.effect,
z.design.pairwise.interaction,
z.design.saturated)
delta0 <-StartValueFunction(freq.subtypes,y.case.control,z.all)
#x.all has no intercept yet
#we will add the intercept in C code
x.all <- GenerateXAll(y,baselineonly,main.effect,pairwise.interaction,saturated)
library(bc2)
document()
library(bc2)
ls
library(bc2)
ls
ls
cd
quit()
library(bc2)
document()
library(devtools)
document()
library(bc2)
document(0)
document()
library(bc2)
document()
library(bc2)
document()
shiny::runApp('~/GoogleDrive/try')
install_github("andrewhaoyu/bc2", args = c('--library="/home/zhangh24/R/x86_64-pc-linux-gnu-library/3.4"'))
library(bc2)
#install_github("andrewhaoyu/bc2")
library(bc2)
runApp('~/GoogleDrive/try')
#install_github("andrewhaoyu/bc2")
library(bc2)
runApp('~/GoogleDrive/try')
library(bc2)
document()
document()
library(devtools)
document()
library(bc2)
document()
library(bc2)
GenerateCompleteYPheno()
GenerateCompleteYPheno
GenerateZDesignMainEffect
library(bc2)
library(bc2)
library(bc2)
EMmvpoly
document(0)
document()
library(bc2)
library(bc2)
document()
library(bc2)
library(bc2)
GenerateZDesignAdditive
library(bc2)
document()
library(bc2)
rm(list=ls())
library(devtools)
library(bc2)
library(bc2)
squarex(2)
document()
library(bc2)
squarex(2)
devtools::install()
library(bc2)
devtools::install()
library(bc2)
squarex(2)
document()
square(x)
squarex(x)
squarex(2)
library(bc2)
squarex(2)
library(devtools)
document()
library(bc2)
library(bc2)
document()
library(bc2)
EMStep
document9
document（
document()
library(bc2)
library(bc2)
library(bc2)
square(x)
square2(x)
squarex(2)
library(qqman)
meta_com_shared_common = meta_com_shared_1p
idx <- which((gwasresult$CHR==20&gwasresult$BP==11502618)|
(gwasresult$CHR==20&gwasresult$BP==39248265)|
(gwasresult$CHR==20&gwasresult$BP==52297165)|
(gwasresult$CHR==5&gwasresult$BP==67441026)|
(gwasresult$CHR==15&gwasresult$BP==67408298)|
(gwasresult$CHR==17&gwasresult$BP==7571752)|
(gwasresult$CHR==2&gwasresult$BP==67902524))
highlight <- gwasresult[idx,1]
ls()
library(bc2)
rm(list=ls())
library(bc2)
ls()
EMmvpoly()
EMmvpoly
rm(list=ls())
detach("package:bc2", unload=TRUE)
library(bc2)
documenet
document
document()
document()
library(bc2)
library(bc2)
getwd()
?format
format(1:10)
format(1:10,trim=T)
as.numeric(format(c(1.01,2.23,3.39),scientific=T,digits=2))
as.numeric(format(c(1.01,2.23,3.39),scientific=T,digits=3))
as.numeric(format(c(1.01,2.23,3.39),scientific=T,digits=4))
as.numeric(format(c(1e-08,2.23E-07,3.39e-06),scientific=T,digits=4))
formatC(123.45, mode = "double", format = "d")
